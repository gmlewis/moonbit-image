// Generated using `moon info`, DON'T EDIT IT
package "gmlewis/image/color"

import(
  "gmlewis/io"
)

// Values
let alpha16_model : &Model

let alpha_model : &Model

let black : Gray16

let cmyk_model : &Model

fn cmyk_to_rgb(Byte, Byte, Byte, Byte) -> (Byte, Byte, Byte)

let gray16_model : &Model

let gray_model : &Model

fn model_func((&Color) -> &Color, String, Palette?) -> &Model

let n_y_cb_cr_a_model : &Model

let nrgba64_model : &Model

let nrgba_model : &Model

let opaque_ : Alpha16

fn rgb_to_cmyk(Byte, Byte, Byte) -> (Byte, Byte, Byte, Byte)

fn rgb_to_y_cb_cr(Byte, Byte, Byte) -> (Byte, Byte, Byte)

let rgba64_model : &Model

let rgba_model : &Model

let transparent : Alpha16

let white : Gray16

let y_cb_cr_model : &Model

fn y_cb_cr_to_rgb(Byte, Byte, Byte) -> (Byte, Byte, Byte)

// Types and methods
pub(all) struct Alpha {
  a : Byte
}
fn Alpha::from(&Color) -> Self
fn Alpha::new(Byte) -> Self
impl Color for Alpha
impl Eq for Alpha
impl Show for Alpha

pub(all) struct Alpha16 {
  a : UInt
}
fn Alpha16::from(&Color) -> Self
fn Alpha16::new(UInt) -> Self
impl Color for Alpha16
impl Eq for Alpha16
impl Show for Alpha16

pub(all) struct CMYK {
  c : Byte
  m : Byte
  y : Byte
  k : Byte
}
fn CMYK::from(&Color) -> Self
fn CMYK::new(Byte, Byte, Byte, Byte) -> Self
impl Color for CMYK
impl Eq for CMYK
impl Show for CMYK

pub(all) struct Gray {
  y : Byte
}
fn Gray::from(&Color) -> Self
fn Gray::new(Byte) -> Self
impl Color for Gray
impl Eq for Gray
impl Show for Gray

pub(all) struct Gray16 {
  y : UInt
}
fn Gray16::from(&Color) -> Self
fn Gray16::new(UInt) -> Self
impl Color for Gray16
impl Eq for Gray16
impl Show for Gray16

type ModelFunc
impl Model for ModelFunc

pub(all) struct NRGBA {
  r : Byte
  g : Byte
  b : Byte
  a : Byte
}
fn NRGBA::from(&Color) -> Self
fn NRGBA::new(Byte, Byte, Byte, Byte) -> Self
impl Color for NRGBA
impl Eq for NRGBA
impl Show for NRGBA

pub(all) struct NRGBA64 {
  r : UInt
  g : UInt
  b : UInt
  a : UInt
}
fn NRGBA64::from(&Color) -> Self
fn NRGBA64::new(UInt, UInt, UInt, UInt) -> Self
impl Color for NRGBA64
impl Eq for NRGBA64
impl Show for NRGBA64

pub(all) struct NYCbCrA {
  y : Byte
  cb : Byte
  cr : Byte
  a : Byte
}
fn NYCbCrA::new(Byte, Byte, Byte, Byte) -> Self
impl Color for NYCbCrA
impl Eq for NYCbCrA
impl Show for NYCbCrA

pub(all) type Palette @io.Slice[&Color]
fn Palette::from(Array[&Color]) -> Self
fn Palette::index(Self, &Color) -> Int
fn Palette::inner(Self) -> @io.Slice[&Color]
fn Palette::length(Self) -> Int
fn Palette::new(Int) -> Self
fn Palette::new_empty() -> Self
fn Palette::op_as_view(Self, start~ : Int = .., end~ : Int) -> Self
fn Palette::op_get(Self, Int) -> &Color
fn Palette::op_set(Self, Int, &Color) -> Unit
impl Model for Palette

pub(all) struct RGBA {
  r : Byte
  g : Byte
  b : Byte
  a : Byte
}
fn RGBA::from(&Color) -> Self
fn RGBA::new(Byte, Byte, Byte, Byte) -> Self
impl Color for RGBA
impl Eq for RGBA
impl Show for RGBA

pub(all) struct RGBA64 {
  r : UInt
  g : UInt
  b : UInt
  a : UInt
}
fn RGBA64::from(&Color) -> Self
fn RGBA64::new(UInt, UInt, UInt, UInt) -> Self
impl Color for RGBA64
impl Eq for RGBA64
impl Show for RGBA64

pub(all) struct YCbCr {
  y : Byte
  cb : Byte
  cr : Byte
}
fn YCbCr::new(Byte, Byte, Byte) -> Self
impl Color for YCbCr
impl Eq for YCbCr
impl Show for YCbCr

fn Color::to_string(&Self) -> String
impl Eq for &Color
impl Show for &Color

// Type aliases

// Traits
pub(open) trait Color {
  rgba(Self) -> (UInt, UInt, UInt, UInt)
  model(Self) -> String
  raw(Self) -> (UInt, UInt, UInt, UInt)
}

pub(open) trait Model {
  convert(Self, &Color) -> &Color
  name(Self) -> String
  get_palette(Self) -> Palette?
}

