package gmlewis/image

alias @gmlewis/image/color as @color
alias @gmlewis/io as @io

// Values
fn add2_non_neg(Int, Int) -> Int

fn mul3_non_neg(Int, Int, Int) -> Int

fn pt(Int, Int) -> Point

fn rect(Int, Int, Int, Int) -> Rectangle

// Types and methods
pub(all) struct Alpha {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl Alpha {
  alpha_at(Self, Int, Int) -> @color.Alpha
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_alpha(Self, Int, Int, @color.Alpha) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for Alpha

pub(all) struct Alpha16 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl Alpha16 {
  alpha16_at(Self, Int, Int) -> @color.Alpha16
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_alpha16(Self, Int, Int, @color.Alpha16) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for Alpha16

pub(all) struct CMYK {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl CMYK {
  cmyk_at(Self, Int, Int) -> @color.CMYK
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_cmyk(Self, Int, Int, @color.CMYK) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for CMYK

pub(all) struct Config {
  color_model : &@color.Model
  width : Int
  height : Int
}
impl Config {
  new_empty() -> Self
}

pub(all) struct Gray {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl Gray {
  gray_at(Self, Int, Int) -> @color.Gray
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_gray(Self, Int, Int, @color.Gray) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for Gray

pub(all) struct Gray16 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl Gray16 {
  gray16_at(Self, Int, Int) -> @color.Gray16
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_gray16(Self, Int, Int, @color.Gray16) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for Gray16

pub(all) struct NRGBA {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl NRGBA {
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  nrgba_at(Self, Int, Int) -> @color.NRGBA
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_nrgba(Self, Int, Int, @color.NRGBA) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for NRGBA

pub(all) struct NRGBA64 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl NRGBA64 {
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  nrgba64_at(Self, Int, Int) -> @color.NRGBA64
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_nrgba64(Self, Int, Int, @color.NRGBA64) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for NRGBA64

pub(all) struct Paletted {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
  palette : @color.Palette
}
impl Paletted {
  new(Rectangle, @color.Palette) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_color_index(Self, Int, Int, Byte) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for Paletted

pub(all) struct Point {
  x : Int
  y : Int
}
impl Point {
  div(Self, Int) -> Self
  is_in(Self, Rectangle) -> Bool
  mod(Self, Rectangle) -> Self
  mul(Self, Int) -> Self
  op_add(Self, Self) -> Self
  op_equal(Self, Self) -> Bool
  op_sub(Self, Self) -> Self
  to_string(Self) -> String
}
impl Eq for Point
impl Show for Point

pub(all) struct RGBA {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl RGBA {
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  rgba_at(Self, Int, Int) -> @color.RGBA
  set_rgba(Self, Int, Int, @color.RGBA) -> Unit
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for RGBA

pub(all) struct RGBA64 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
impl RGBA64 {
  new(Rectangle) -> Self!SizeError
  new_empty() -> Self
  op_get(Self, Point) -> &@color.Color
  op_set(Self, Point, &@color.Color) -> Unit
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
}
impl Image for RGBA64

pub(all) struct Rectangle {
  min : Point
  max : Point
}
impl Rectangle {
  add(Self, Point) -> Self
  canon(Self) -> Self
  copy(Self) -> Self
  dx(Self) -> Int
  dy(Self) -> Int
  empty(Self) -> Bool
  inset(Self, Int) -> Self
  intersect(Self, Self) -> Self
  is_in(Self, Self) -> Bool
  new() -> Self
  op_equal(Self, Self) -> Bool
  overlaps(Self, Self) -> Bool
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  size(Self) -> Point
  sub(Self, Point) -> Self
  to_string(Self) -> String
  union(Self, Self) -> Self
}
impl Image for Rectangle
impl Eq for Rectangle
impl Show for Rectangle

type SizeError
impl Eq for SizeError
impl Show for SizeError

impl Image {
  empty(&Self) -> Bool
  new_empty() -> &Self
}

// Type aliases

// Traits
pub(open) trait Image {
  color_model(Self) -> &@color.Model
  bounds(Self) -> Rectangle
  at(Self, Int, Int) -> &@color.Color
  opaque(Self) -> Bool
  set(Self, Int, Int, &@color.Color) -> Unit
  sub_image(Self, Rectangle) -> &Image
  raw_data(Self) -> @io.Slice[Byte]
  get_bytes_per_pixel(Self) -> Int
  get_stride(Self) -> Int
  pix_offset(Self, Int, Int) -> Int
  color_index_at(Self, Int, Int) -> Byte
}

pub(open) trait RGBA64Image {
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  color_model(Self) -> &@color.Model
  bounds(Self) -> Rectangle
  at(Self, Int, Int) -> &@color.Color
}

