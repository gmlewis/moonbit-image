package "gmlewis/image"

import(
  "gmlewis/image/color"
  "gmlewis/io"
)

// Values
fn add(Rectangle, Point) -> Rectangle

fn add2_non_neg(Int, Int) -> Int

fn alpha16_at(Alpha16, Int, Int) -> @color.Alpha16

fn alpha_at(Alpha, Int, Int) -> @color.Alpha

fn canon(Rectangle) -> Rectangle

fn cmyk_at(CMYK, Int, Int) -> @color.CMYK

fn copy(Rectangle) -> Rectangle

fn div(Point, Int) -> Point

fn dx(Rectangle) -> Int

fn dy(Rectangle) -> Int

fn empty(Rectangle) -> Bool

fn gray16_at(Gray16, Int, Int) -> @color.Gray16

fn gray_at(Gray, Int, Int) -> @color.Gray

fn inset(Rectangle, Int) -> Rectangle

fn intersect(Rectangle, Rectangle) -> Rectangle

fn is_in(Point, Rectangle) -> Bool

fn mod(Point, Rectangle) -> Point

fn mul(Point, Int) -> Point

fn mul3_non_neg(Int, Int, Int) -> Int

fn nrgba64_at(NRGBA64, Int, Int) -> @color.NRGBA64

fn nrgba_at(NRGBA, Int, Int) -> @color.NRGBA

fn overlaps(Rectangle, Rectangle) -> Bool

fn pt(Int, Int) -> Point

fn rect(Int, Int, Int, Int) -> Rectangle

fn rgba64_at(Rectangle, Int, Int) -> @color.RGBA64

fn rgba_at(RGBA, Int, Int) -> @color.RGBA

fn set_alpha(Alpha, Int, Int, @color.Alpha) -> Unit

fn set_alpha16(Alpha16, Int, Int, @color.Alpha16) -> Unit

fn set_cmyk(CMYK, Int, Int, @color.CMYK) -> Unit

fn set_color_index(Paletted, Int, Int, Byte) -> Unit

fn set_gray(Gray, Int, Int, @color.Gray) -> Unit

fn set_gray16(Gray16, Int, Int, @color.Gray16) -> Unit

fn set_nrgba(NRGBA, Int, Int, @color.NRGBA) -> Unit

fn set_nrgba64(NRGBA64, Int, Int, @color.NRGBA64) -> Unit

fn set_rgba(RGBA, Int, Int, @color.RGBA) -> Unit

fn size(Rectangle) -> Point

fn sub(Rectangle, Point) -> Rectangle

fn to_string(Point) -> String

fn union(Rectangle, Rectangle) -> Rectangle

// Types and methods
pub(all) struct Alpha {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn Alpha::alpha_at(Self, Int, Int) -> @color.Alpha
fn Alpha::new(Rectangle) -> Self raise SizeError
fn Alpha::new_empty() -> Self
fn Alpha::op_get(Self, Point) -> &@color.Color
fn Alpha::op_set(Self, Point, &@color.Color) -> Unit
fn Alpha::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn Alpha::set_alpha(Self, Int, Int, @color.Alpha) -> Unit
fn Alpha::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for Alpha

pub(all) struct Alpha16 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn Alpha16::alpha16_at(Self, Int, Int) -> @color.Alpha16
fn Alpha16::new(Rectangle) -> Self raise SizeError
fn Alpha16::new_empty() -> Self
fn Alpha16::op_get(Self, Point) -> &@color.Color
fn Alpha16::op_set(Self, Point, &@color.Color) -> Unit
fn Alpha16::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn Alpha16::set_alpha16(Self, Int, Int, @color.Alpha16) -> Unit
fn Alpha16::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for Alpha16

pub(all) struct CMYK {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn CMYK::cmyk_at(Self, Int, Int) -> @color.CMYK
fn CMYK::new(Rectangle) -> Self raise SizeError
fn CMYK::new_empty() -> Self
fn CMYK::op_get(Self, Point) -> &@color.Color
fn CMYK::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn CMYK::set_cmyk(Self, Int, Int, @color.CMYK) -> Unit
fn CMYK::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for CMYK

pub(all) struct Config {
  color_model : &@color.Model
  width : Int
  height : Int
}
fn Config::new_empty() -> Self

pub(all) struct Gray {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn Gray::gray_at(Self, Int, Int) -> @color.Gray
fn Gray::new(Rectangle) -> Self raise SizeError
fn Gray::new_empty() -> Self
fn Gray::op_get(Self, Point) -> &@color.Color
fn Gray::op_set(Self, Point, &@color.Color) -> Unit
fn Gray::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn Gray::set_gray(Self, Int, Int, @color.Gray) -> Unit
fn Gray::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for Gray

pub(all) struct Gray16 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn Gray16::gray16_at(Self, Int, Int) -> @color.Gray16
fn Gray16::new(Rectangle) -> Self raise SizeError
fn Gray16::new_empty() -> Self
fn Gray16::op_get(Self, Point) -> &@color.Color
fn Gray16::op_set(Self, Point, &@color.Color) -> Unit
fn Gray16::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn Gray16::set_gray16(Self, Int, Int, @color.Gray16) -> Unit
fn Gray16::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for Gray16

pub(all) struct NRGBA {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn NRGBA::new(Rectangle) -> Self raise SizeError
fn NRGBA::new_empty() -> Self
fn NRGBA::nrgba_at(Self, Int, Int) -> @color.NRGBA
fn NRGBA::op_get(Self, Point) -> &@color.Color
fn NRGBA::op_set(Self, Point, &@color.Color) -> Unit
fn NRGBA::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn NRGBA::set_nrgba(Self, Int, Int, @color.NRGBA) -> Unit
fn NRGBA::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for NRGBA

pub(all) struct NRGBA64 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn NRGBA64::new(Rectangle) -> Self raise SizeError
fn NRGBA64::new_empty() -> Self
fn NRGBA64::nrgba64_at(Self, Int, Int) -> @color.NRGBA64
fn NRGBA64::op_get(Self, Point) -> &@color.Color
fn NRGBA64::op_set(Self, Point, &@color.Color) -> Unit
fn NRGBA64::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn NRGBA64::set_nrgba64(Self, Int, Int, @color.NRGBA64) -> Unit
fn NRGBA64::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for NRGBA64

pub(all) struct Paletted {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
  mut palette : @color.Palette
}
fn Paletted::new(Rectangle, @color.Palette) -> Self raise SizeError
fn Paletted::new_empty() -> Self
fn Paletted::op_get(Self, Point) -> &@color.Color
fn Paletted::op_set(Self, Point, &@color.Color) -> Unit
fn Paletted::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn Paletted::set_color_index(Self, Int, Int, Byte) -> Unit
fn Paletted::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for Paletted

pub(all) struct Point {
  mut x : Int
  mut y : Int
}
fn Point::div(Self, Int) -> Self
fn Point::is_in(Self, Rectangle) -> Bool
fn Point::mod(Self, Rectangle) -> Self
fn Point::mul(Self, Int) -> Self
fn Point::to_string(Self) -> String
impl Add for Point
impl Eq for Point
impl Show for Point
impl Sub for Point

pub(all) struct RGBA {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn RGBA::new(Rectangle) -> Self raise SizeError
fn RGBA::new_empty() -> Self
fn RGBA::op_get(Self, Point) -> &@color.Color
fn RGBA::op_set(Self, Point, &@color.Color) -> Unit
fn RGBA::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn RGBA::rgba_at(Self, Int, Int) -> @color.RGBA
fn RGBA::set_rgba(Self, Int, Int, @color.RGBA) -> Unit
fn RGBA::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for RGBA

pub(all) struct RGBA64 {
  pix : @io.Slice[Byte]
  stride : Int
  rect : Rectangle
}
fn RGBA64::new(Rectangle) -> Self raise SizeError
fn RGBA64::new_empty() -> Self
fn RGBA64::op_get(Self, Point) -> &@color.Color
fn RGBA64::op_set(Self, Point, &@color.Color) -> Unit
fn RGBA64::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn RGBA64::set_rgba64(Self, Int, Int, @color.RGBA64) -> Unit
impl Image for RGBA64

pub(all) struct Rectangle {
  min : Point
  max : Point
}
fn Rectangle::add(Self, Point) -> Self
fn Rectangle::canon(Self) -> Self
fn Rectangle::copy(Self) -> Self
fn Rectangle::dx(Self) -> Int
fn Rectangle::dy(Self) -> Int
fn Rectangle::empty(Self) -> Bool
fn Rectangle::inset(Self, Int) -> Self
fn Rectangle::intersect(Self, Self) -> Self
fn Rectangle::is_in(Self, Self) -> Bool
fn Rectangle::new() -> Self
fn Rectangle::overlaps(Self, Self) -> Bool
fn Rectangle::rgba64_at(Self, Int, Int) -> @color.RGBA64
fn Rectangle::size(Self) -> Point
fn Rectangle::sub(Self, Point) -> Self
fn Rectangle::to_string(Self) -> String
fn Rectangle::union(Self, Self) -> Self
impl Image for Rectangle
impl Eq for Rectangle
impl Show for Rectangle

type SizeError
impl Eq for SizeError
impl Show for SizeError

fn Image::empty(&Self) -> Bool
fn Image::new_empty() -> &Self

// Type aliases

// Traits
pub(open) trait Image {
  color_model(Self) -> &@color.Model
  bounds(Self) -> Rectangle
  at(Self, Int, Int) -> &@color.Color
  opaque_(Self) -> Bool
  set(Self, Int, Int, &@color.Color) -> Unit
  sub_image(Self, Rectangle) -> &Image
  raw_data(Self) -> @io.Slice[Byte]
  get_bytes_per_pixel(Self) -> Int
  get_stride(Self) -> Int
  pix_offset(Self, Int, Int) -> Int
  color_index_at(Self, Int, Int) -> Byte
}

pub(open) trait RGBA64Image {
  rgba64_at(Self, Int, Int) -> @color.RGBA64
  color_model(Self) -> &@color.Model
  bounds(Self) -> Rectangle
  at(Self, Int, Int) -> &@color.Color
}

